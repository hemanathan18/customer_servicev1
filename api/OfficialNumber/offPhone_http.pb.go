// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: offPhone.proto

package OfficialNumber

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOffPhoneServiceCreateOffPhoneNumber = "/OfficialNumber.OffPhoneService/CreateOffPhoneNumber"
const OperationOffPhoneServiceDeleteOffPhoneNumber = "/OfficialNumber.OffPhoneService/DeleteOffPhoneNumber"
const OperationOffPhoneServiceGetOffPhoneNumber = "/OfficialNumber.OffPhoneService/GetOffPhoneNumber"
const OperationOffPhoneServiceGetOffPhoneNumbers = "/OfficialNumber.OffPhoneService/GetOffPhoneNumbers"
const OperationOffPhoneServiceUpdateOffPhoneNumber = "/OfficialNumber.OffPhoneService/UpdateOffPhoneNumber"

type OffPhoneServiceHTTPServer interface {
	CreateOffPhoneNumber(context.Context, *CreateOffPhoneNumberRequest) (*CreateOffPhoneNumberResponse, error)
	DeleteOffPhoneNumber(context.Context, *DeleteOffPhoneNumberRequest) (*DeleteOffPhoneNumberResponse, error)
	GetOffPhoneNumber(context.Context, *GetOffPhoneNumberRequest) (*GetOffPhoneNumberResponse, error)
	GetOffPhoneNumbers(context.Context, *GetOffPhoneNumbersRequest) (*GetOffPhoneNumbersResponse, error)
	UpdateOffPhoneNumber(context.Context, *UpdateOffPhoneNumberRequest) (*UpdateOffPhoneNumberResponse, error)
}

func RegisterOffPhoneServiceHTTPServer(s *http.Server, srv OffPhoneServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/off_phonenumbers", _OffPhoneService_CreateOffPhoneNumber0_HTTP_Handler(srv))
	r.GET("/off_phonenumbers/{off_ph_id}", _OffPhoneService_GetOffPhoneNumber0_HTTP_Handler(srv))
	r.PUT("/off_phonenumbers/{off_ph_id}", _OffPhoneService_UpdateOffPhoneNumber0_HTTP_Handler(srv))
	r.DELETE("/off_phonenumbers/{off_ph_id}", _OffPhoneService_DeleteOffPhoneNumber0_HTTP_Handler(srv))
	r.GET("/off_phonenumbers", _OffPhoneService_GetOffPhoneNumbers0_HTTP_Handler(srv))
}

func _OffPhoneService_CreateOffPhoneNumber0_HTTP_Handler(srv OffPhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOffPhoneNumberRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOffPhoneServiceCreateOffPhoneNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOffPhoneNumber(ctx, req.(*CreateOffPhoneNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOffPhoneNumberResponse)
		return ctx.Result(200, reply)
	}
}

func _OffPhoneService_GetOffPhoneNumber0_HTTP_Handler(srv OffPhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOffPhoneNumberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOffPhoneServiceGetOffPhoneNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOffPhoneNumber(ctx, req.(*GetOffPhoneNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOffPhoneNumberResponse)
		return ctx.Result(200, reply)
	}
}

func _OffPhoneService_UpdateOffPhoneNumber0_HTTP_Handler(srv OffPhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOffPhoneNumberRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOffPhoneServiceUpdateOffPhoneNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOffPhoneNumber(ctx, req.(*UpdateOffPhoneNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOffPhoneNumberResponse)
		return ctx.Result(200, reply)
	}
}

func _OffPhoneService_DeleteOffPhoneNumber0_HTTP_Handler(srv OffPhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOffPhoneNumberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOffPhoneServiceDeleteOffPhoneNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOffPhoneNumber(ctx, req.(*DeleteOffPhoneNumberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOffPhoneNumberResponse)
		return ctx.Result(200, reply)
	}
}

func _OffPhoneService_GetOffPhoneNumbers0_HTTP_Handler(srv OffPhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOffPhoneNumbersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOffPhoneServiceGetOffPhoneNumbers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOffPhoneNumbers(ctx, req.(*GetOffPhoneNumbersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOffPhoneNumbersResponse)
		return ctx.Result(200, reply)
	}
}

type OffPhoneServiceHTTPClient interface {
	CreateOffPhoneNumber(ctx context.Context, req *CreateOffPhoneNumberRequest, opts ...http.CallOption) (rsp *CreateOffPhoneNumberResponse, err error)
	DeleteOffPhoneNumber(ctx context.Context, req *DeleteOffPhoneNumberRequest, opts ...http.CallOption) (rsp *DeleteOffPhoneNumberResponse, err error)
	GetOffPhoneNumber(ctx context.Context, req *GetOffPhoneNumberRequest, opts ...http.CallOption) (rsp *GetOffPhoneNumberResponse, err error)
	GetOffPhoneNumbers(ctx context.Context, req *GetOffPhoneNumbersRequest, opts ...http.CallOption) (rsp *GetOffPhoneNumbersResponse, err error)
	UpdateOffPhoneNumber(ctx context.Context, req *UpdateOffPhoneNumberRequest, opts ...http.CallOption) (rsp *UpdateOffPhoneNumberResponse, err error)
}

type OffPhoneServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOffPhoneServiceHTTPClient(client *http.Client) OffPhoneServiceHTTPClient {
	return &OffPhoneServiceHTTPClientImpl{client}
}

func (c *OffPhoneServiceHTTPClientImpl) CreateOffPhoneNumber(ctx context.Context, in *CreateOffPhoneNumberRequest, opts ...http.CallOption) (*CreateOffPhoneNumberResponse, error) {
	var out CreateOffPhoneNumberResponse
	pattern := "/off_phonenumbers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOffPhoneServiceCreateOffPhoneNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OffPhoneServiceHTTPClientImpl) DeleteOffPhoneNumber(ctx context.Context, in *DeleteOffPhoneNumberRequest, opts ...http.CallOption) (*DeleteOffPhoneNumberResponse, error) {
	var out DeleteOffPhoneNumberResponse
	pattern := "/off_phonenumbers/{off_ph_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOffPhoneServiceDeleteOffPhoneNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OffPhoneServiceHTTPClientImpl) GetOffPhoneNumber(ctx context.Context, in *GetOffPhoneNumberRequest, opts ...http.CallOption) (*GetOffPhoneNumberResponse, error) {
	var out GetOffPhoneNumberResponse
	pattern := "/off_phonenumbers/{off_ph_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOffPhoneServiceGetOffPhoneNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OffPhoneServiceHTTPClientImpl) GetOffPhoneNumbers(ctx context.Context, in *GetOffPhoneNumbersRequest, opts ...http.CallOption) (*GetOffPhoneNumbersResponse, error) {
	var out GetOffPhoneNumbersResponse
	pattern := "/off_phonenumbers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOffPhoneServiceGetOffPhoneNumbers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OffPhoneServiceHTTPClientImpl) UpdateOffPhoneNumber(ctx context.Context, in *UpdateOffPhoneNumberRequest, opts ...http.CallOption) (*UpdateOffPhoneNumberResponse, error) {
	var out UpdateOffPhoneNumberResponse
	pattern := "/off_phonenumbers/{off_ph_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOffPhoneServiceUpdateOffPhoneNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
