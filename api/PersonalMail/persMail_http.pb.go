// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: persMail.proto

package PersonalMail

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPersMailServiceCreatePersMail = "/PersonalMail.PersMailService/CreatePersMail"
const OperationPersMailServiceDeletePersMail = "/PersonalMail.PersMailService/DeletePersMail"
const OperationPersMailServiceGetPersMail = "/PersonalMail.PersMailService/GetPersMail"
const OperationPersMailServiceGetPersMails = "/PersonalMail.PersMailService/GetPersMails"
const OperationPersMailServiceUpdatePersMail = "/PersonalMail.PersMailService/UpdatePersMail"

type PersMailServiceHTTPServer interface {
	CreatePersMail(context.Context, *CreatePersMailRequest) (*CreatePersMailResponse, error)
	DeletePersMail(context.Context, *DeletePersMailRequest) (*DeletePersMailResponse, error)
	GetPersMail(context.Context, *GetPersMailRequest) (*GetPersMailResponse, error)
	GetPersMails(context.Context, *GetPersMailsRequest) (*GetPersMailsResponse, error)
	UpdatePersMail(context.Context, *UpdatePersMailRequest) (*UpdatePersMailResponse, error)
}

func RegisterPersMailServiceHTTPServer(s *http.Server, srv PersMailServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/pers_mails", _PersMailService_CreatePersMail0_HTTP_Handler(srv))
	r.GET("/pers_mails/{pers_em_id}", _PersMailService_GetPersMail0_HTTP_Handler(srv))
	r.PUT("/pers_mails/{pers_em_id}", _PersMailService_UpdatePersMail0_HTTP_Handler(srv))
	r.DELETE("/pers_mails/{pers_em_id}", _PersMailService_DeletePersMail0_HTTP_Handler(srv))
	r.GET("/pers_mails", _PersMailService_GetPersMails0_HTTP_Handler(srv))
}

func _PersMailService_CreatePersMail0_HTTP_Handler(srv PersMailServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePersMailRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersMailServiceCreatePersMail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePersMail(ctx, req.(*CreatePersMailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePersMailResponse)
		return ctx.Result(200, reply)
	}
}

func _PersMailService_GetPersMail0_HTTP_Handler(srv PersMailServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPersMailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersMailServiceGetPersMail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPersMail(ctx, req.(*GetPersMailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPersMailResponse)
		return ctx.Result(200, reply)
	}
}

func _PersMailService_UpdatePersMail0_HTTP_Handler(srv PersMailServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePersMailRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersMailServiceUpdatePersMail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePersMail(ctx, req.(*UpdatePersMailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePersMailResponse)
		return ctx.Result(200, reply)
	}
}

func _PersMailService_DeletePersMail0_HTTP_Handler(srv PersMailServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePersMailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersMailServiceDeletePersMail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePersMail(ctx, req.(*DeletePersMailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePersMailResponse)
		return ctx.Result(200, reply)
	}
}

func _PersMailService_GetPersMails0_HTTP_Handler(srv PersMailServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPersMailsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersMailServiceGetPersMails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPersMails(ctx, req.(*GetPersMailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPersMailsResponse)
		return ctx.Result(200, reply)
	}
}

type PersMailServiceHTTPClient interface {
	CreatePersMail(ctx context.Context, req *CreatePersMailRequest, opts ...http.CallOption) (rsp *CreatePersMailResponse, err error)
	DeletePersMail(ctx context.Context, req *DeletePersMailRequest, opts ...http.CallOption) (rsp *DeletePersMailResponse, err error)
	GetPersMail(ctx context.Context, req *GetPersMailRequest, opts ...http.CallOption) (rsp *GetPersMailResponse, err error)
	GetPersMails(ctx context.Context, req *GetPersMailsRequest, opts ...http.CallOption) (rsp *GetPersMailsResponse, err error)
	UpdatePersMail(ctx context.Context, req *UpdatePersMailRequest, opts ...http.CallOption) (rsp *UpdatePersMailResponse, err error)
}

type PersMailServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPersMailServiceHTTPClient(client *http.Client) PersMailServiceHTTPClient {
	return &PersMailServiceHTTPClientImpl{client}
}

func (c *PersMailServiceHTTPClientImpl) CreatePersMail(ctx context.Context, in *CreatePersMailRequest, opts ...http.CallOption) (*CreatePersMailResponse, error) {
	var out CreatePersMailResponse
	pattern := "/pers_mails"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPersMailServiceCreatePersMail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PersMailServiceHTTPClientImpl) DeletePersMail(ctx context.Context, in *DeletePersMailRequest, opts ...http.CallOption) (*DeletePersMailResponse, error) {
	var out DeletePersMailResponse
	pattern := "/pers_mails/{pers_em_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPersMailServiceDeletePersMail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PersMailServiceHTTPClientImpl) GetPersMail(ctx context.Context, in *GetPersMailRequest, opts ...http.CallOption) (*GetPersMailResponse, error) {
	var out GetPersMailResponse
	pattern := "/pers_mails/{pers_em_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPersMailServiceGetPersMail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PersMailServiceHTTPClientImpl) GetPersMails(ctx context.Context, in *GetPersMailsRequest, opts ...http.CallOption) (*GetPersMailsResponse, error) {
	var out GetPersMailsResponse
	pattern := "/pers_mails"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPersMailServiceGetPersMails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PersMailServiceHTTPClientImpl) UpdatePersMail(ctx context.Context, in *UpdatePersMailRequest, opts ...http.CallOption) (*UpdatePersMailResponse, error) {
	var out UpdatePersMailResponse
	pattern := "/pers_mails/{pers_em_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPersMailServiceUpdatePersMail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
