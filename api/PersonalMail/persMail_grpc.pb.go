// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: persMail.proto

package PersonalMail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersMailService_CreatePersMail_FullMethodName = "/PersonalMail.PersMailService/CreatePersMail"
	PersMailService_GetPersMail_FullMethodName    = "/PersonalMail.PersMailService/GetPersMail"
	PersMailService_UpdatePersMail_FullMethodName = "/PersonalMail.PersMailService/UpdatePersMail"
	PersMailService_DeletePersMail_FullMethodName = "/PersonalMail.PersMailService/DeletePersMail"
	PersMailService_GetPersMails_FullMethodName   = "/PersonalMail.PersMailService/GetPersMails"
)

// PersMailServiceClient is the client API for PersMailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersMailServiceClient interface {
	CreatePersMail(ctx context.Context, in *CreatePersMailRequest, opts ...grpc.CallOption) (*CreatePersMailResponse, error)
	GetPersMail(ctx context.Context, in *GetPersMailRequest, opts ...grpc.CallOption) (*GetPersMailResponse, error)
	UpdatePersMail(ctx context.Context, in *UpdatePersMailRequest, opts ...grpc.CallOption) (*UpdatePersMailResponse, error)
	DeletePersMail(ctx context.Context, in *DeletePersMailRequest, opts ...grpc.CallOption) (*DeletePersMailResponse, error)
	GetPersMails(ctx context.Context, in *GetPersMailsRequest, opts ...grpc.CallOption) (*GetPersMailsResponse, error)
}

type persMailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersMailServiceClient(cc grpc.ClientConnInterface) PersMailServiceClient {
	return &persMailServiceClient{cc}
}

func (c *persMailServiceClient) CreatePersMail(ctx context.Context, in *CreatePersMailRequest, opts ...grpc.CallOption) (*CreatePersMailResponse, error) {
	out := new(CreatePersMailResponse)
	err := c.cc.Invoke(ctx, PersMailService_CreatePersMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persMailServiceClient) GetPersMail(ctx context.Context, in *GetPersMailRequest, opts ...grpc.CallOption) (*GetPersMailResponse, error) {
	out := new(GetPersMailResponse)
	err := c.cc.Invoke(ctx, PersMailService_GetPersMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persMailServiceClient) UpdatePersMail(ctx context.Context, in *UpdatePersMailRequest, opts ...grpc.CallOption) (*UpdatePersMailResponse, error) {
	out := new(UpdatePersMailResponse)
	err := c.cc.Invoke(ctx, PersMailService_UpdatePersMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persMailServiceClient) DeletePersMail(ctx context.Context, in *DeletePersMailRequest, opts ...grpc.CallOption) (*DeletePersMailResponse, error) {
	out := new(DeletePersMailResponse)
	err := c.cc.Invoke(ctx, PersMailService_DeletePersMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persMailServiceClient) GetPersMails(ctx context.Context, in *GetPersMailsRequest, opts ...grpc.CallOption) (*GetPersMailsResponse, error) {
	out := new(GetPersMailsResponse)
	err := c.cc.Invoke(ctx, PersMailService_GetPersMails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersMailServiceServer is the server API for PersMailService service.
// All implementations must embed UnimplementedPersMailServiceServer
// for forward compatibility
type PersMailServiceServer interface {
	CreatePersMail(context.Context, *CreatePersMailRequest) (*CreatePersMailResponse, error)
	GetPersMail(context.Context, *GetPersMailRequest) (*GetPersMailResponse, error)
	UpdatePersMail(context.Context, *UpdatePersMailRequest) (*UpdatePersMailResponse, error)
	DeletePersMail(context.Context, *DeletePersMailRequest) (*DeletePersMailResponse, error)
	GetPersMails(context.Context, *GetPersMailsRequest) (*GetPersMailsResponse, error)
	mustEmbedUnimplementedPersMailServiceServer()
}

// UnimplementedPersMailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersMailServiceServer struct {
}

func (UnimplementedPersMailServiceServer) CreatePersMail(context.Context, *CreatePersMailRequest) (*CreatePersMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersMail not implemented")
}
func (UnimplementedPersMailServiceServer) GetPersMail(context.Context, *GetPersMailRequest) (*GetPersMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersMail not implemented")
}
func (UnimplementedPersMailServiceServer) UpdatePersMail(context.Context, *UpdatePersMailRequest) (*UpdatePersMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersMail not implemented")
}
func (UnimplementedPersMailServiceServer) DeletePersMail(context.Context, *DeletePersMailRequest) (*DeletePersMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersMail not implemented")
}
func (UnimplementedPersMailServiceServer) GetPersMails(context.Context, *GetPersMailsRequest) (*GetPersMailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersMails not implemented")
}
func (UnimplementedPersMailServiceServer) mustEmbedUnimplementedPersMailServiceServer() {}

// UnsafePersMailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersMailServiceServer will
// result in compilation errors.
type UnsafePersMailServiceServer interface {
	mustEmbedUnimplementedPersMailServiceServer()
}

func RegisterPersMailServiceServer(s grpc.ServiceRegistrar, srv PersMailServiceServer) {
	s.RegisterService(&PersMailService_ServiceDesc, srv)
}

func _PersMailService_CreatePersMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersMailServiceServer).CreatePersMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersMailService_CreatePersMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersMailServiceServer).CreatePersMail(ctx, req.(*CreatePersMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersMailService_GetPersMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersMailServiceServer).GetPersMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersMailService_GetPersMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersMailServiceServer).GetPersMail(ctx, req.(*GetPersMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersMailService_UpdatePersMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersMailServiceServer).UpdatePersMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersMailService_UpdatePersMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersMailServiceServer).UpdatePersMail(ctx, req.(*UpdatePersMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersMailService_DeletePersMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersMailServiceServer).DeletePersMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersMailService_DeletePersMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersMailServiceServer).DeletePersMail(ctx, req.(*DeletePersMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersMailService_GetPersMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersMailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersMailServiceServer).GetPersMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersMailService_GetPersMails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersMailServiceServer).GetPersMails(ctx, req.(*GetPersMailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersMailService_ServiceDesc is the grpc.ServiceDesc for PersMailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersMailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PersonalMail.PersMailService",
	HandlerType: (*PersMailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersMail",
			Handler:    _PersMailService_CreatePersMail_Handler,
		},
		{
			MethodName: "GetPersMail",
			Handler:    _PersMailService_GetPersMail_Handler,
		},
		{
			MethodName: "UpdatePersMail",
			Handler:    _PersMailService_UpdatePersMail_Handler,
		},
		{
			MethodName: "DeletePersMail",
			Handler:    _PersMailService_DeletePersMail_Handler,
		},
		{
			MethodName: "GetPersMails",
			Handler:    _PersMailService_GetPersMails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "persMail.proto",
}
