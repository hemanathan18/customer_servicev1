// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: customer.proto

package Customer

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCustomerServiceCreateCustomer = "/Customer.CustomerService/CreateCustomer"
const OperationCustomerServiceDeleteCustomer = "/Customer.CustomerService/DeleteCustomer"
const OperationCustomerServiceGetCustomer = "/Customer.CustomerService/GetCustomer"
const OperationCustomerServiceGetCustomers = "/Customer.CustomerService/GetCustomers"
const OperationCustomerServiceUpdateCustomer = "/Customer.CustomerService/UpdateCustomer"

type CustomerServiceHTTPServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error)
	GetCustomers(context.Context, *GetCustomersRequest) (*GetCustomersResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
}

func RegisterCustomerServiceHTTPServer(s *http.Server, srv CustomerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/customers", _CustomerService_CreateCustomer0_HTTP_Handler(srv))
	r.GET("/customers/{customerId}", _CustomerService_GetCustomer0_HTTP_Handler(srv))
	r.PUT("/customers/{customerId}", _CustomerService_UpdateCustomer0_HTTP_Handler(srv))
	r.DELETE("/customers/{customerId}", _CustomerService_DeleteCustomer0_HTTP_Handler(srv))
	r.GET("/customers", _CustomerService_GetCustomers0_HTTP_Handler(srv))
}

func _CustomerService_CreateCustomer0_HTTP_Handler(srv CustomerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerServiceCreateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomer(ctx, req.(*CreateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerService_GetCustomer0_HTTP_Handler(srv CustomerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerServiceGetCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomer(ctx, req.(*GetCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerService_UpdateCustomer0_HTTP_Handler(srv CustomerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCustomerRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerServiceUpdateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCustomerResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerService_DeleteCustomer0_HTTP_Handler(srv CustomerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerServiceDeleteCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCustomerResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerService_GetCustomers0_HTTP_Handler(srv CustomerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerServiceGetCustomers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomers(ctx, req.(*GetCustomersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomersResponse)
		return ctx.Result(200, reply)
	}
}

type CustomerServiceHTTPClient interface {
	CreateCustomer(ctx context.Context, req *CreateCustomerRequest, opts ...http.CallOption) (rsp *CreateCustomerResponse, err error)
	DeleteCustomer(ctx context.Context, req *DeleteCustomerRequest, opts ...http.CallOption) (rsp *DeleteCustomerResponse, err error)
	GetCustomer(ctx context.Context, req *GetCustomerRequest, opts ...http.CallOption) (rsp *GetCustomerResponse, err error)
	GetCustomers(ctx context.Context, req *GetCustomersRequest, opts ...http.CallOption) (rsp *GetCustomersResponse, err error)
	UpdateCustomer(ctx context.Context, req *UpdateCustomerRequest, opts ...http.CallOption) (rsp *UpdateCustomerResponse, err error)
}

type CustomerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerServiceHTTPClient(client *http.Client) CustomerServiceHTTPClient {
	return &CustomerServiceHTTPClientImpl{client}
}

func (c *CustomerServiceHTTPClientImpl) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...http.CallOption) (*CreateCustomerResponse, error) {
	var out CreateCustomerResponse
	pattern := "/customers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerServiceCreateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerServiceHTTPClientImpl) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...http.CallOption) (*DeleteCustomerResponse, error) {
	var out DeleteCustomerResponse
	pattern := "/customers/{customerId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerServiceDeleteCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerServiceHTTPClientImpl) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...http.CallOption) (*GetCustomerResponse, error) {
	var out GetCustomerResponse
	pattern := "/customers/{customerId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerServiceGetCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerServiceHTTPClientImpl) GetCustomers(ctx context.Context, in *GetCustomersRequest, opts ...http.CallOption) (*GetCustomersResponse, error) {
	var out GetCustomersResponse
	pattern := "/customers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerServiceGetCustomers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerServiceHTTPClientImpl) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...http.CallOption) (*UpdateCustomerResponse, error) {
	var out UpdateCustomerResponse
	pattern := "/customers/{customerId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerServiceUpdateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
