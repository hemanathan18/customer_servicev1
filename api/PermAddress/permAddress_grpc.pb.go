// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: permAddress.proto

package PermAddress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermAddressService_CreatePermAddress_FullMethodName = "/PermAddress.PermAddressService/CreatePermAddress"
	PermAddressService_GetPermAddress_FullMethodName    = "/PermAddress.PermAddressService/GetPermAddress"
	PermAddressService_UpdatePermAddress_FullMethodName = "/PermAddress.PermAddressService/UpdatePermAddress"
	PermAddressService_DeletePermAddress_FullMethodName = "/PermAddress.PermAddressService/DeletePermAddress"
	PermAddressService_GetPermAddresses_FullMethodName  = "/PermAddress.PermAddressService/GetPermAddresses"
)

// PermAddressServiceClient is the client API for PermAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermAddressServiceClient interface {
	CreatePermAddress(ctx context.Context, in *CreatePermAddressRequest, opts ...grpc.CallOption) (*CreatePermAddressResponse, error)
	GetPermAddress(ctx context.Context, in *GetPermAddressRequest, opts ...grpc.CallOption) (*GetPermAddressResponse, error)
	UpdatePermAddress(ctx context.Context, in *UpdatePermAddressRequest, opts ...grpc.CallOption) (*UpdatePermAddressResponse, error)
	DeletePermAddress(ctx context.Context, in *DeletePermAddressRequest, opts ...grpc.CallOption) (*DeletePermAddressResponse, error)
	GetPermAddresses(ctx context.Context, in *GetPermAddressesRequest, opts ...grpc.CallOption) (*GetPermAddressesResponse, error)
}

type permAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermAddressServiceClient(cc grpc.ClientConnInterface) PermAddressServiceClient {
	return &permAddressServiceClient{cc}
}

func (c *permAddressServiceClient) CreatePermAddress(ctx context.Context, in *CreatePermAddressRequest, opts ...grpc.CallOption) (*CreatePermAddressResponse, error) {
	out := new(CreatePermAddressResponse)
	err := c.cc.Invoke(ctx, PermAddressService_CreatePermAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permAddressServiceClient) GetPermAddress(ctx context.Context, in *GetPermAddressRequest, opts ...grpc.CallOption) (*GetPermAddressResponse, error) {
	out := new(GetPermAddressResponse)
	err := c.cc.Invoke(ctx, PermAddressService_GetPermAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permAddressServiceClient) UpdatePermAddress(ctx context.Context, in *UpdatePermAddressRequest, opts ...grpc.CallOption) (*UpdatePermAddressResponse, error) {
	out := new(UpdatePermAddressResponse)
	err := c.cc.Invoke(ctx, PermAddressService_UpdatePermAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permAddressServiceClient) DeletePermAddress(ctx context.Context, in *DeletePermAddressRequest, opts ...grpc.CallOption) (*DeletePermAddressResponse, error) {
	out := new(DeletePermAddressResponse)
	err := c.cc.Invoke(ctx, PermAddressService_DeletePermAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permAddressServiceClient) GetPermAddresses(ctx context.Context, in *GetPermAddressesRequest, opts ...grpc.CallOption) (*GetPermAddressesResponse, error) {
	out := new(GetPermAddressesResponse)
	err := c.cc.Invoke(ctx, PermAddressService_GetPermAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermAddressServiceServer is the server API for PermAddressService service.
// All implementations must embed UnimplementedPermAddressServiceServer
// for forward compatibility
type PermAddressServiceServer interface {
	CreatePermAddress(context.Context, *CreatePermAddressRequest) (*CreatePermAddressResponse, error)
	GetPermAddress(context.Context, *GetPermAddressRequest) (*GetPermAddressResponse, error)
	UpdatePermAddress(context.Context, *UpdatePermAddressRequest) (*UpdatePermAddressResponse, error)
	DeletePermAddress(context.Context, *DeletePermAddressRequest) (*DeletePermAddressResponse, error)
	GetPermAddresses(context.Context, *GetPermAddressesRequest) (*GetPermAddressesResponse, error)
	mustEmbedUnimplementedPermAddressServiceServer()
}

// UnimplementedPermAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermAddressServiceServer struct {
}

func (UnimplementedPermAddressServiceServer) CreatePermAddress(context.Context, *CreatePermAddressRequest) (*CreatePermAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermAddress not implemented")
}
func (UnimplementedPermAddressServiceServer) GetPermAddress(context.Context, *GetPermAddressRequest) (*GetPermAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermAddress not implemented")
}
func (UnimplementedPermAddressServiceServer) UpdatePermAddress(context.Context, *UpdatePermAddressRequest) (*UpdatePermAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermAddress not implemented")
}
func (UnimplementedPermAddressServiceServer) DeletePermAddress(context.Context, *DeletePermAddressRequest) (*DeletePermAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermAddress not implemented")
}
func (UnimplementedPermAddressServiceServer) GetPermAddresses(context.Context, *GetPermAddressesRequest) (*GetPermAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermAddresses not implemented")
}
func (UnimplementedPermAddressServiceServer) mustEmbedUnimplementedPermAddressServiceServer() {}

// UnsafePermAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermAddressServiceServer will
// result in compilation errors.
type UnsafePermAddressServiceServer interface {
	mustEmbedUnimplementedPermAddressServiceServer()
}

func RegisterPermAddressServiceServer(s grpc.ServiceRegistrar, srv PermAddressServiceServer) {
	s.RegisterService(&PermAddressService_ServiceDesc, srv)
}

func _PermAddressService_CreatePermAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermAddressServiceServer).CreatePermAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermAddressService_CreatePermAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermAddressServiceServer).CreatePermAddress(ctx, req.(*CreatePermAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermAddressService_GetPermAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermAddressServiceServer).GetPermAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermAddressService_GetPermAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermAddressServiceServer).GetPermAddress(ctx, req.(*GetPermAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermAddressService_UpdatePermAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermAddressServiceServer).UpdatePermAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermAddressService_UpdatePermAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermAddressServiceServer).UpdatePermAddress(ctx, req.(*UpdatePermAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermAddressService_DeletePermAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermAddressServiceServer).DeletePermAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermAddressService_DeletePermAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermAddressServiceServer).DeletePermAddress(ctx, req.(*DeletePermAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermAddressService_GetPermAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermAddressServiceServer).GetPermAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermAddressService_GetPermAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermAddressServiceServer).GetPermAddresses(ctx, req.(*GetPermAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermAddressService_ServiceDesc is the grpc.ServiceDesc for PermAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PermAddress.PermAddressService",
	HandlerType: (*PermAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermAddress",
			Handler:    _PermAddressService_CreatePermAddress_Handler,
		},
		{
			MethodName: "GetPermAddress",
			Handler:    _PermAddressService_GetPermAddress_Handler,
		},
		{
			MethodName: "UpdatePermAddress",
			Handler:    _PermAddressService_UpdatePermAddress_Handler,
		},
		{
			MethodName: "DeletePermAddress",
			Handler:    _PermAddressService_DeletePermAddress_Handler,
		},
		{
			MethodName: "GetPermAddresses",
			Handler:    _PermAddressService_GetPermAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permAddress.proto",
}
