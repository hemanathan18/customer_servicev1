// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: permAddress.proto

package PermAddress

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPermAddressServiceCreatePermAddress = "/PermAddress.PermAddressService/CreatePermAddress"
const OperationPermAddressServiceDeletePermAddress = "/PermAddress.PermAddressService/DeletePermAddress"
const OperationPermAddressServiceGetPermAddress = "/PermAddress.PermAddressService/GetPermAddress"
const OperationPermAddressServiceGetPermAddresses = "/PermAddress.PermAddressService/GetPermAddresses"
const OperationPermAddressServiceUpdatePermAddress = "/PermAddress.PermAddressService/UpdatePermAddress"

type PermAddressServiceHTTPServer interface {
	CreatePermAddress(context.Context, *CreatePermAddressRequest) (*CreatePermAddressResponse, error)
	DeletePermAddress(context.Context, *DeletePermAddressRequest) (*DeletePermAddressResponse, error)
	GetPermAddress(context.Context, *GetPermAddressRequest) (*GetPermAddressResponse, error)
	GetPermAddresses(context.Context, *GetPermAddressesRequest) (*GetPermAddressesResponse, error)
	UpdatePermAddress(context.Context, *UpdatePermAddressRequest) (*UpdatePermAddressResponse, error)
}

func RegisterPermAddressServiceHTTPServer(s *http.Server, srv PermAddressServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/perm_addresses", _PermAddressService_CreatePermAddress0_HTTP_Handler(srv))
	r.GET("/perm_addresses/{perm_add_id}", _PermAddressService_GetPermAddress0_HTTP_Handler(srv))
	r.PUT("/perm_addresses/{perm_add_id}", _PermAddressService_UpdatePermAddress0_HTTP_Handler(srv))
	r.DELETE("/perm_addresses/{perm_add_id}", _PermAddressService_DeletePermAddress0_HTTP_Handler(srv))
	r.GET("/perm_addresses", _PermAddressService_GetPermAddresses0_HTTP_Handler(srv))
}

func _PermAddressService_CreatePermAddress0_HTTP_Handler(srv PermAddressServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePermAddressRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermAddressServiceCreatePermAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePermAddress(ctx, req.(*CreatePermAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePermAddressResponse)
		return ctx.Result(200, reply)
	}
}

func _PermAddressService_GetPermAddress0_HTTP_Handler(srv PermAddressServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermAddressServiceGetPermAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermAddress(ctx, req.(*GetPermAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermAddressResponse)
		return ctx.Result(200, reply)
	}
}

func _PermAddressService_UpdatePermAddress0_HTTP_Handler(srv PermAddressServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePermAddressRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermAddressServiceUpdatePermAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePermAddress(ctx, req.(*UpdatePermAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePermAddressResponse)
		return ctx.Result(200, reply)
	}
}

func _PermAddressService_DeletePermAddress0_HTTP_Handler(srv PermAddressServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermAddressServiceDeletePermAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermAddress(ctx, req.(*DeletePermAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePermAddressResponse)
		return ctx.Result(200, reply)
	}
}

func _PermAddressService_GetPermAddresses0_HTTP_Handler(srv PermAddressServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermAddressesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermAddressServiceGetPermAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermAddresses(ctx, req.(*GetPermAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermAddressesResponse)
		return ctx.Result(200, reply)
	}
}

type PermAddressServiceHTTPClient interface {
	CreatePermAddress(ctx context.Context, req *CreatePermAddressRequest, opts ...http.CallOption) (rsp *CreatePermAddressResponse, err error)
	DeletePermAddress(ctx context.Context, req *DeletePermAddressRequest, opts ...http.CallOption) (rsp *DeletePermAddressResponse, err error)
	GetPermAddress(ctx context.Context, req *GetPermAddressRequest, opts ...http.CallOption) (rsp *GetPermAddressResponse, err error)
	GetPermAddresses(ctx context.Context, req *GetPermAddressesRequest, opts ...http.CallOption) (rsp *GetPermAddressesResponse, err error)
	UpdatePermAddress(ctx context.Context, req *UpdatePermAddressRequest, opts ...http.CallOption) (rsp *UpdatePermAddressResponse, err error)
}

type PermAddressServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPermAddressServiceHTTPClient(client *http.Client) PermAddressServiceHTTPClient {
	return &PermAddressServiceHTTPClientImpl{client}
}

func (c *PermAddressServiceHTTPClientImpl) CreatePermAddress(ctx context.Context, in *CreatePermAddressRequest, opts ...http.CallOption) (*CreatePermAddressResponse, error) {
	var out CreatePermAddressResponse
	pattern := "/perm_addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermAddressServiceCreatePermAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermAddressServiceHTTPClientImpl) DeletePermAddress(ctx context.Context, in *DeletePermAddressRequest, opts ...http.CallOption) (*DeletePermAddressResponse, error) {
	var out DeletePermAddressResponse
	pattern := "/perm_addresses/{perm_add_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermAddressServiceDeletePermAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermAddressServiceHTTPClientImpl) GetPermAddress(ctx context.Context, in *GetPermAddressRequest, opts ...http.CallOption) (*GetPermAddressResponse, error) {
	var out GetPermAddressResponse
	pattern := "/perm_addresses/{perm_add_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermAddressServiceGetPermAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermAddressServiceHTTPClientImpl) GetPermAddresses(ctx context.Context, in *GetPermAddressesRequest, opts ...http.CallOption) (*GetPermAddressesResponse, error) {
	var out GetPermAddressesResponse
	pattern := "/perm_addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermAddressServiceGetPermAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermAddressServiceHTTPClientImpl) UpdatePermAddress(ctx context.Context, in *UpdatePermAddressRequest, opts ...http.CallOption) (*UpdatePermAddressResponse, error) {
	var out UpdatePermAddressResponse
	pattern := "/perm_addresses/{perm_add_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermAddressServiceUpdatePermAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
