// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: customerRelation.proto

package CustomerRelation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerRelationService_CreateCustomerRelation_FullMethodName = "/CustomerRelation.CustomerRelationService/CreateCustomerRelation"
	CustomerRelationService_GetCustomerRelation_FullMethodName    = "/CustomerRelation.CustomerRelationService/GetCustomerRelation"
	CustomerRelationService_UpdateCustomerRelation_FullMethodName = "/CustomerRelation.CustomerRelationService/UpdateCustomerRelation"
	CustomerRelationService_DeleteCustomerRelation_FullMethodName = "/CustomerRelation.CustomerRelationService/DeleteCustomerRelation"
	CustomerRelationService_GetCustomerRelations_FullMethodName   = "/CustomerRelation.CustomerRelationService/GetCustomerRelations"
)

// CustomerRelationServiceClient is the client API for CustomerRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerRelationServiceClient interface {
	CreateCustomerRelation(ctx context.Context, in *CreateCustomerRelationRequest, opts ...grpc.CallOption) (*CreateCustomerRelationResponse, error)
	GetCustomerRelation(ctx context.Context, in *GetCustomerRelationRequest, opts ...grpc.CallOption) (*GetCustomerRelationResponse, error)
	UpdateCustomerRelation(ctx context.Context, in *UpdateCustomerRelationRequest, opts ...grpc.CallOption) (*UpdateCustomerRelationResponse, error)
	DeleteCustomerRelation(ctx context.Context, in *DeleteCustomerRelationRequest, opts ...grpc.CallOption) (*DeleteCustomerRelationResponse, error)
	GetCustomerRelations(ctx context.Context, in *GetCustomerRelationsRequest, opts ...grpc.CallOption) (*GetCustomerRelationsResponse, error)
}

type customerRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerRelationServiceClient(cc grpc.ClientConnInterface) CustomerRelationServiceClient {
	return &customerRelationServiceClient{cc}
}

func (c *customerRelationServiceClient) CreateCustomerRelation(ctx context.Context, in *CreateCustomerRelationRequest, opts ...grpc.CallOption) (*CreateCustomerRelationResponse, error) {
	out := new(CreateCustomerRelationResponse)
	err := c.cc.Invoke(ctx, CustomerRelationService_CreateCustomerRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRelationServiceClient) GetCustomerRelation(ctx context.Context, in *GetCustomerRelationRequest, opts ...grpc.CallOption) (*GetCustomerRelationResponse, error) {
	out := new(GetCustomerRelationResponse)
	err := c.cc.Invoke(ctx, CustomerRelationService_GetCustomerRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRelationServiceClient) UpdateCustomerRelation(ctx context.Context, in *UpdateCustomerRelationRequest, opts ...grpc.CallOption) (*UpdateCustomerRelationResponse, error) {
	out := new(UpdateCustomerRelationResponse)
	err := c.cc.Invoke(ctx, CustomerRelationService_UpdateCustomerRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRelationServiceClient) DeleteCustomerRelation(ctx context.Context, in *DeleteCustomerRelationRequest, opts ...grpc.CallOption) (*DeleteCustomerRelationResponse, error) {
	out := new(DeleteCustomerRelationResponse)
	err := c.cc.Invoke(ctx, CustomerRelationService_DeleteCustomerRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRelationServiceClient) GetCustomerRelations(ctx context.Context, in *GetCustomerRelationsRequest, opts ...grpc.CallOption) (*GetCustomerRelationsResponse, error) {
	out := new(GetCustomerRelationsResponse)
	err := c.cc.Invoke(ctx, CustomerRelationService_GetCustomerRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerRelationServiceServer is the server API for CustomerRelationService service.
// All implementations must embed UnimplementedCustomerRelationServiceServer
// for forward compatibility
type CustomerRelationServiceServer interface {
	CreateCustomerRelation(context.Context, *CreateCustomerRelationRequest) (*CreateCustomerRelationResponse, error)
	GetCustomerRelation(context.Context, *GetCustomerRelationRequest) (*GetCustomerRelationResponse, error)
	UpdateCustomerRelation(context.Context, *UpdateCustomerRelationRequest) (*UpdateCustomerRelationResponse, error)
	DeleteCustomerRelation(context.Context, *DeleteCustomerRelationRequest) (*DeleteCustomerRelationResponse, error)
	GetCustomerRelations(context.Context, *GetCustomerRelationsRequest) (*GetCustomerRelationsResponse, error)
	mustEmbedUnimplementedCustomerRelationServiceServer()
}

// UnimplementedCustomerRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerRelationServiceServer struct {
}

func (UnimplementedCustomerRelationServiceServer) CreateCustomerRelation(context.Context, *CreateCustomerRelationRequest) (*CreateCustomerRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerRelation not implemented")
}
func (UnimplementedCustomerRelationServiceServer) GetCustomerRelation(context.Context, *GetCustomerRelationRequest) (*GetCustomerRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRelation not implemented")
}
func (UnimplementedCustomerRelationServiceServer) UpdateCustomerRelation(context.Context, *UpdateCustomerRelationRequest) (*UpdateCustomerRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerRelation not implemented")
}
func (UnimplementedCustomerRelationServiceServer) DeleteCustomerRelation(context.Context, *DeleteCustomerRelationRequest) (*DeleteCustomerRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerRelation not implemented")
}
func (UnimplementedCustomerRelationServiceServer) GetCustomerRelations(context.Context, *GetCustomerRelationsRequest) (*GetCustomerRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRelations not implemented")
}
func (UnimplementedCustomerRelationServiceServer) mustEmbedUnimplementedCustomerRelationServiceServer() {
}

// UnsafeCustomerRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerRelationServiceServer will
// result in compilation errors.
type UnsafeCustomerRelationServiceServer interface {
	mustEmbedUnimplementedCustomerRelationServiceServer()
}

func RegisterCustomerRelationServiceServer(s grpc.ServiceRegistrar, srv CustomerRelationServiceServer) {
	s.RegisterService(&CustomerRelationService_ServiceDesc, srv)
}

func _CustomerRelationService_CreateCustomerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRelationServiceServer).CreateCustomerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerRelationService_CreateCustomerRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRelationServiceServer).CreateCustomerRelation(ctx, req.(*CreateCustomerRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRelationService_GetCustomerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRelationServiceServer).GetCustomerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerRelationService_GetCustomerRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRelationServiceServer).GetCustomerRelation(ctx, req.(*GetCustomerRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRelationService_UpdateCustomerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRelationServiceServer).UpdateCustomerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerRelationService_UpdateCustomerRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRelationServiceServer).UpdateCustomerRelation(ctx, req.(*UpdateCustomerRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRelationService_DeleteCustomerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRelationServiceServer).DeleteCustomerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerRelationService_DeleteCustomerRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRelationServiceServer).DeleteCustomerRelation(ctx, req.(*DeleteCustomerRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRelationService_GetCustomerRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRelationServiceServer).GetCustomerRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerRelationService_GetCustomerRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRelationServiceServer).GetCustomerRelations(ctx, req.(*GetCustomerRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerRelationService_ServiceDesc is the grpc.ServiceDesc for CustomerRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerRelation.CustomerRelationService",
	HandlerType: (*CustomerRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomerRelation",
			Handler:    _CustomerRelationService_CreateCustomerRelation_Handler,
		},
		{
			MethodName: "GetCustomerRelation",
			Handler:    _CustomerRelationService_GetCustomerRelation_Handler,
		},
		{
			MethodName: "UpdateCustomerRelation",
			Handler:    _CustomerRelationService_UpdateCustomerRelation_Handler,
		},
		{
			MethodName: "DeleteCustomerRelation",
			Handler:    _CustomerRelationService_DeleteCustomerRelation_Handler,
		},
		{
			MethodName: "GetCustomerRelations",
			Handler:    _CustomerRelationService_GetCustomerRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customerRelation.proto",
}
