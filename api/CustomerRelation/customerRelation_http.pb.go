// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: customerRelation.proto

package CustomerRelation

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCustomerRelationServiceCreateCustomerRelation = "/CustomerRelation.CustomerRelationService/CreateCustomerRelation"
const OperationCustomerRelationServiceDeleteCustomerRelation = "/CustomerRelation.CustomerRelationService/DeleteCustomerRelation"
const OperationCustomerRelationServiceGetCustomerRelation = "/CustomerRelation.CustomerRelationService/GetCustomerRelation"
const OperationCustomerRelationServiceGetCustomerRelations = "/CustomerRelation.CustomerRelationService/GetCustomerRelations"
const OperationCustomerRelationServiceUpdateCustomerRelation = "/CustomerRelation.CustomerRelationService/UpdateCustomerRelation"

type CustomerRelationServiceHTTPServer interface {
	CreateCustomerRelation(context.Context, *CreateCustomerRelationRequest) (*CreateCustomerRelationResponse, error)
	DeleteCustomerRelation(context.Context, *DeleteCustomerRelationRequest) (*DeleteCustomerRelationResponse, error)
	GetCustomerRelation(context.Context, *GetCustomerRelationRequest) (*GetCustomerRelationResponse, error)
	GetCustomerRelations(context.Context, *GetCustomerRelationsRequest) (*GetCustomerRelationsResponse, error)
	UpdateCustomerRelation(context.Context, *UpdateCustomerRelationRequest) (*UpdateCustomerRelationResponse, error)
}

func RegisterCustomerRelationServiceHTTPServer(s *http.Server, srv CustomerRelationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/customer_relations", _CustomerRelationService_CreateCustomerRelation0_HTTP_Handler(srv))
	r.GET("/customer_relations/{crId}", _CustomerRelationService_GetCustomerRelation0_HTTP_Handler(srv))
	r.PUT("/customer_relations/{crId}", _CustomerRelationService_UpdateCustomerRelation0_HTTP_Handler(srv))
	r.DELETE("/customer_relations/{crId}", _CustomerRelationService_DeleteCustomerRelation0_HTTP_Handler(srv))
	r.GET("/customer_relations", _CustomerRelationService_GetCustomerRelations0_HTTP_Handler(srv))
}

func _CustomerRelationService_CreateCustomerRelation0_HTTP_Handler(srv CustomerRelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerRelationRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerRelationServiceCreateCustomerRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomerRelation(ctx, req.(*CreateCustomerRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerRelationResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerRelationService_GetCustomerRelation0_HTTP_Handler(srv CustomerRelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerRelationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerRelationServiceGetCustomerRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomerRelation(ctx, req.(*GetCustomerRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerRelationResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerRelationService_UpdateCustomerRelation0_HTTP_Handler(srv CustomerRelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCustomerRelationRequest
		if err := ctx.Bind(&in.Requestbody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerRelationServiceUpdateCustomerRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCustomerRelation(ctx, req.(*UpdateCustomerRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCustomerRelationResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerRelationService_DeleteCustomerRelation0_HTTP_Handler(srv CustomerRelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCustomerRelationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerRelationServiceDeleteCustomerRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCustomerRelation(ctx, req.(*DeleteCustomerRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCustomerRelationResponse)
		return ctx.Result(200, reply)
	}
}

func _CustomerRelationService_GetCustomerRelations0_HTTP_Handler(srv CustomerRelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerRelationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerRelationServiceGetCustomerRelations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomerRelations(ctx, req.(*GetCustomerRelationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerRelationsResponse)
		return ctx.Result(200, reply)
	}
}

type CustomerRelationServiceHTTPClient interface {
	CreateCustomerRelation(ctx context.Context, req *CreateCustomerRelationRequest, opts ...http.CallOption) (rsp *CreateCustomerRelationResponse, err error)
	DeleteCustomerRelation(ctx context.Context, req *DeleteCustomerRelationRequest, opts ...http.CallOption) (rsp *DeleteCustomerRelationResponse, err error)
	GetCustomerRelation(ctx context.Context, req *GetCustomerRelationRequest, opts ...http.CallOption) (rsp *GetCustomerRelationResponse, err error)
	GetCustomerRelations(ctx context.Context, req *GetCustomerRelationsRequest, opts ...http.CallOption) (rsp *GetCustomerRelationsResponse, err error)
	UpdateCustomerRelation(ctx context.Context, req *UpdateCustomerRelationRequest, opts ...http.CallOption) (rsp *UpdateCustomerRelationResponse, err error)
}

type CustomerRelationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerRelationServiceHTTPClient(client *http.Client) CustomerRelationServiceHTTPClient {
	return &CustomerRelationServiceHTTPClientImpl{client}
}

func (c *CustomerRelationServiceHTTPClientImpl) CreateCustomerRelation(ctx context.Context, in *CreateCustomerRelationRequest, opts ...http.CallOption) (*CreateCustomerRelationResponse, error) {
	var out CreateCustomerRelationResponse
	pattern := "/customer_relations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerRelationServiceCreateCustomerRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerRelationServiceHTTPClientImpl) DeleteCustomerRelation(ctx context.Context, in *DeleteCustomerRelationRequest, opts ...http.CallOption) (*DeleteCustomerRelationResponse, error) {
	var out DeleteCustomerRelationResponse
	pattern := "/customer_relations/{crId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerRelationServiceDeleteCustomerRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerRelationServiceHTTPClientImpl) GetCustomerRelation(ctx context.Context, in *GetCustomerRelationRequest, opts ...http.CallOption) (*GetCustomerRelationResponse, error) {
	var out GetCustomerRelationResponse
	pattern := "/customer_relations/{crId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerRelationServiceGetCustomerRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerRelationServiceHTTPClientImpl) GetCustomerRelations(ctx context.Context, in *GetCustomerRelationsRequest, opts ...http.CallOption) (*GetCustomerRelationsResponse, error) {
	var out GetCustomerRelationsResponse
	pattern := "/customer_relations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerRelationServiceGetCustomerRelations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerRelationServiceHTTPClientImpl) UpdateCustomerRelation(ctx context.Context, in *UpdateCustomerRelationRequest, opts ...http.CallOption) (*UpdateCustomerRelationResponse, error) {
	var out UpdateCustomerRelationResponse
	pattern := "/customer_relations/{crId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerRelationServiceUpdateCustomerRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Requestbody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
