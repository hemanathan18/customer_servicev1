// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"project/internal/conf"
	"project/internal/data"
	"project/internal/server"
	"project/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	customerRepository := data.NewCustomerRepository(dataData, logger)
	customerService := service.NewCustomerService(customerRepository)
	officialMailRepository := data.NewOfficialMailRepository(dataData, logger)
	offMailServiceService := service.NewOffMailServiceService(officialMailRepository)
	officialNumberRepository := data.NewOfficialNumberRepository(dataData, logger)
	offPhoneServiceService := service.NewOffPhoneServiceService(officialNumberRepository)
	permAddressRepository := data.NewPermAdressRepository(dataData, logger)
	permAddressServiceService := service.NewPermAddressServiceService(permAddressRepository)
	personalMailRepository := data.NewPersonalMailRepository(dataData, logger)
	persMailServiceService := service.NewPersMailServiceService(personalMailRepository)
	personalNumberRepository := data.NewPersonalNumberRepository(dataData, logger)
	persPhoneServiceService := service.NewPersPhoneServiceService(personalNumberRepository)
	tempAddressRepository := data.NewTempAdressRepository(dataData, logger)
	tempAddressServiceService := service.NewTempAddressServiceService(tempAddressRepository)
	customerRelationRepository := data.NewCustomerRelationRepository(dataData, logger)
	customerRelationServiceService := service.NewCustomerRelationServiceService(customerRelationRepository)
	grpcServer := server.NewGRPCServer(confServer, customerService, offMailServiceService, offPhoneServiceService, permAddressServiceService, persMailServiceService, persPhoneServiceService, tempAddressServiceService, customerRelationServiceService, logger)
	httpServer := server.NewHTTPServer(confServer, customerService, offMailServiceService, offPhoneServiceService, permAddressServiceService, persMailServiceService, persPhoneServiceService, tempAddressServiceService, customerRelationServiceService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
